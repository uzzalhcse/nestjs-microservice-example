version: '3.8'
services:
  api-gateway:
    build:
      dockerfile: Dockerfile
      context: ./api-gateway
      target: production
    image: ts4udocker/ecommerce-rmq_gateway
    command: npm run start:prod
    env_file:
      - ./api-gateway/.env
    depends_on:
      - rabbitmq
    # volumes:
    #   - ./api-gateway:/app/api-gateway
    #   - /app/api-gateway/node_modules
    ports:
      - '5050:5050'

  user-service:
    build:
      dockerfile: Dockerfile
      context: ./user-service
      target: production
    image: ts4udocker/ecommerce-rmq_user-service
    command: npm run start:prod
    env_file:
      - ./user-service/.env
    depends_on:
      - mongodb
      - rabbitmq
    # volumes:
    #   - ./user-service:/app/user-service
    #   - /app/user-service/node_modules
    # ports:
    #   - '3000:3000'


  product-service:
    build:
      dockerfile: Dockerfile
      context: ./product-service
      target: production
    image: ts4udocker/ecommerce-rmq_product-service
    command: npm run start:migrate:prod
    env_file:
      - ./product-service/.env
    depends_on:
      - postgres
      - rabbitmq
    # volumes:
    #   - ./prosuct-service:/app/prosuct-service
    #   - /app/prosuct-service/node_modules
    # ports:
    #   - '3000:3000'

  chat-service:
    build:
      dockerfile: Dockerfile
      context: ./chat-service
      target: production
    image: ts4udocker/ecommerce-rmq_chat-service
    command: npm run start:prod
    env_file:
      - ./chat-service/.env
    depends_on:
      - postgres
      - kafka
    volumes:
      - ./chat-service:/app/chat-service
      - /app/chat-service/node_modules


  order-service:
    build:
      dockerfile: Dockerfile
      context: ./order-service
      target: production
    image: ts4udocker/ecommerce-rmq_order-service
    command: npm run start:migrate:prod
    env_file:
      - ./order-service/.env
    depends_on:
      - mysql
      - rabbitmq
    # volumes:
    #   - ./order-service:/app/order-service
    #   - /app/order-service/node_modules
    # ports:
    #   - '3000:3000'


  client:
    build:
      dockerfile: Dockerfile
      context: ./client
    image: ts4udocker/ecommerce-rmq_client
    command: npm start
    ports:
      - '5051:3001'


  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  kafka:
    image: obsidiandynamics/kafka
    container_name: 'kafka'
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"

  rabbitmq:
    image: rabbitmq:3.11.11-management
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persist data

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db


  postgres:
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5433:5432

  mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'order-service'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  postgres:
  mysql_data:
  mongodb_data:
  rabbitmq_data:
